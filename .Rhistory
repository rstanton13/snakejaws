x4 <- x1 - s * trait1[i] * cos(theta)
x5 <- x2 + s * trait2[i] * cos(theta)
x6 <- x1 + s * trait2[i] * cos(theta)
y1 <- s * max(trait1) * sin(theta) + dy + (w/2) * sin(pi/2 - theta) - s * min(0,min(trait1)) * sin(theta)
y2 <- s * max(trait1) * sin(theta) + dy - (w/2) * sin(pi/2 - theta) - s * min(0,min(trait1)) * sin(theta)
y3 <- y2 - s * trait1[i] * sin(theta)
y4 <- y1 - s * trait1[i] * sin(theta)
y5 <- y2 + s * trait2[i] * sin(theta)
y6 <- y1 + s * trait2[i] * sin(theta)
x1w <- s * max(trait1) * cos(theta) + dx - wider*(w/2) * cos(pi/2 - theta) - s * min(0,min(trait1)) * cos(theta)
x2w <- s * max(trait1) * cos(theta) + dx + wider*(w/2) * cos(pi/2 - theta) - s * min(0,min(trait1)) * cos(theta)
y1w <- s * max(trait1) * sin(theta) + dy + wider*(w/2) * sin(pi/2 - theta) - s * min(0,min(trait1)) * sin(theta)
y2w <- s * max(trait1) * sin(theta) + dy - wider*(w/2) * sin(pi/2 - theta) - s * min(0,min(trait1)) * sin(theta)
x01 <- x2w - s * max(trait1) * cos(theta)
x02 <- x1w - s * max(trait1) * cos(theta)
x03 <- x2w + s * max(trait1) * cos(theta)
x04 <- x1w + s * max(trait1) * cos(theta)
y01 <- y2w - s * max(trait1) * sin(theta)
y02 <- y1w - s * max(trait1) * sin(theta)
y03 <- y2w + s * max(trait1) * sin(theta)
y04 <- y1w + s * max(trait1) * sin(theta)
}
## background state colors
polygon(c(x02, x01, x03, x04), c(y02, y01, y03, y04),
col = desat(dat$color[i],bg.thinner), border = desat(dat$color[i],bg.thinner), lwd = 0.01)
## trait 1: Quadrate
#polygon(c(x1, x2, x3, x4), c(y1, y2, y3, y4),
#        col = quad.cols$col[which(abs(trait1[i]-quad.cols$rql)==min(abs(trait1[i]-quad.cols$rql)))], border = "white",lwd=0.005)
## trait 2: MA
#polygon(c(x1, x2, x5, x6), c(y1, y2, y5, y6),
#        col = MA.cols$col[which(abs(trait2[i]-MA.cols$MA)==min(abs(trait2[i]-MA.cols$MA)))], border = "white",lwd=0.005)
if(i+1<=Ntip(map2)){
j <- i+1
if(theta >= 0){
x1.j <- x02
y1.j <- y02
x2.j <- x04
y2.j <- y04
}else if(theta < 0){
x1.j <- x01
y1.j <- y01
x2.j <- x03
y2.j <- y03
}
theta <- atan(obj$yy[j]/obj$xx[j])
if(theta >= 0){
{
s <- ifelse(obj$xx[j] > 0, 1, -1)
dx <- dx.mult *s * h * cos(theta) + s * cos(theta) * sw
dy <- dy.mult * s * h * sin(theta) + s * sin(theta) * sw
x1 <- s * max(trait1) * cos(theta) + dx - (w/2) * cos(pi/2 - theta) - s * min(0,min(trait1)) * cos(theta)
x2 <- s * max(trait1) * cos(theta) + dx + (w/2) * cos(pi/2 - theta) - s * min(0,min(trait1)) * cos(theta)
x3 <- x2 - s * trait1[j] * cos(theta)
x4 <- x1 - s * trait1[j] * cos(theta)
x5 <- x2 + s * trait2[j] * cos(theta)
x6 <- x1 + s * trait2[j] * cos(theta)
y1 <- s * max(trait1) * sin(theta) + dy + (w/2) * sin(pi/2 - theta) - s * min(0,min(trait1)) * sin(theta)
y2 <- s * max(trait1) * sin(theta) + dy - (w/2) * sin(pi/2 - theta) - s * min(0,min(trait1)) * sin(theta)
y3 <- y2 - s * trait1[j] * sin(theta)
y4 <- y1 - s * trait1[j] * sin(theta)
y5 <- y2 + s * trait2[j] * sin(theta)
y6 <- y1 + s * trait2[j] * sin(theta)
x1w <- s * max(trait1) * cos(theta) + dx - wider*(w/2) * cos(pi/2 - theta) - s * min(0,min(trait1)) * cos(theta)
x2w <- s * max(trait1) * cos(theta) + dx + wider*(w/2) * cos(pi/2 - theta) - s * min(0,min(trait1)) * cos(theta)
y1w <- s * max(trait1) * sin(theta) + dy + wider*(w/2) * sin(pi/2 - theta) - s * min(0,min(trait1)) * sin(theta)
y2w <- s * max(trait1) * sin(theta) + dy - wider*(w/2) * sin(pi/2 - theta) - s * min(0,min(trait1)) * sin(theta)
x01 <- x2w - s * max(trait1) * cos(theta)
x02 <- x1w - s * max(trait1) * cos(theta)
x03 <- x2w + s * max(trait1) * cos(theta)
x04 <- x1w + s * max(trait1) * cos(theta)
y01 <- y2w - s * max(trait1) * sin(theta)
y02 <- y1w - s * max(trait1) * sin(theta)
y03 <- y2w + s * max(trait1) * sin(theta)
y04 <- y1w + s * max(trait1) * sin(theta)
}
x3.j <- x01
y3.j <- y01
x4.j <- x03
y4.j <- y03
x5.j <- mean(c(x1.j, x3.j))
x6.j <- mean(c(x2.j, x4.j))
y5.j <- mean(c(y1.j, y3.j))
y6.j <- mean(c(y2.j, y4.j))
}else if(theta<0){
{
s <- ifelse(obj$xx[j] > 0, 1, -1)
dx <- dx.mult *s * h * cos(theta) + s * cos(theta) * sw
dy <- dy.mult * s * h * sin(theta) + s * sin(theta) * sw
x1 <- s * max(trait1) * cos(theta) + dx - (w/2) * cos(pi/2 - theta) - s * min(0,min(trait1)) * cos(theta)
x2 <- s * max(trait1) * cos(theta) + dx + (w/2) * cos(pi/2 - theta) - s * min(0,min(trait1)) * cos(theta)
x3 <- x2 - s * trait1[j] * cos(theta)
x4 <- x1 - s * trait1[j] * cos(theta)
x5 <- x2 + s * trait2[j] * cos(theta)
x6 <- x1 + s * trait2[j] * cos(theta)
y1 <- s * max(trait1) * sin(theta) + dy + (w/2) * sin(pi/2 - theta) - s * min(0,min(trait1)) * sin(theta)
y2 <- s * max(trait1) * sin(theta) + dy - (w/2) * sin(pi/2 - theta) - s * min(0,min(trait1)) * sin(theta)
y3 <- y2 - s * trait1[j] * sin(theta)
y4 <- y1 - s * trait1[j] * sin(theta)
y5 <- y2 + s * trait2[j] * sin(theta)
y6 <- y1 + s * trait2[j] * sin(theta)
x1w <- s * max(trait1) * cos(theta) + dx - wider*(w/2) * cos(pi/2 - theta) - s * min(0,min(trait1)) * cos(theta)
x2w <- s * max(trait1) * cos(theta) + dx + wider*(w/2) * cos(pi/2 - theta) - s * min(0,min(trait1)) * cos(theta)
y1w <- s * max(trait1) * sin(theta) + dy + wider*(w/2) * sin(pi/2 - theta) - s * min(0,min(trait1)) * sin(theta)
y2w <- s * max(trait1) * sin(theta) + dy - wider*(w/2) * sin(pi/2 - theta) - s * min(0,min(trait1)) * sin(theta)
x01 <- x2w - s * max(trait1) * cos(theta)
x02 <- x1w - s * max(trait1) * cos(theta)
x03 <- x2w + s * max(trait1) * cos(theta)
x04 <- x1w + s * max(trait1) * cos(theta)
y01 <- y2w - s * max(trait1) * sin(theta)
y02 <- y1w - s * max(trait1) * sin(theta)
y03 <- y2w + s * max(trait1) * sin(theta)
y04 <- y1w + s * max(trait1) * sin(theta)
}
x3.j <- x02
y3.j <- y02
x4.j <- x04
y4.j <- y04
x5.j <- mean(c(x1.j, x3.j))
x6.j <- mean(c(x2.j, x4.j))
y5.j <- mean(c(y1.j, y3.j))
y6.j <- mean(c(y2.j, y4.j))
}
polygon(c(x2.j,x1.j,x5.j,x6.j), c(y2.j,y1.j,y5.j,y6.j), col=desat(dat$color[i],bg.thinner), border=desat(dat$color[i],bg.thinner), lwd = 0.01)
polygon(c(x4.j,x3.j,x5.j,x6.j), c(y4.j,y3.j,y5.j,y6.j), col=desat(dat$color[j],bg.thinner), border=desat(dat$color[i],bg.thinner), lwd = 0.01)
}
{
theta <- atan(obj$yy[i]/obj$xx[i])
s <- ifelse(obj$xx[i] > 0, 1, -1)
dx <- dx.mult *s * h * cos(theta) + s * cos(theta) * sw
dy <- dy.mult * s * h * sin(theta) + s * sin(theta) * sw
x1 <- s * max(trait1) * cos(theta) + dx - (w/2) * cos(pi/2 - theta) - s * min(0,min(trait1)) * cos(theta)
x2 <- s * max(trait1) * cos(theta) + dx + (w/2) * cos(pi/2 - theta) - s * min(0,min(trait1)) * cos(theta)
x3 <- x2 - s * trait1[i] * cos(theta)
x4 <- x1 - s * trait1[i] * cos(theta)
x5 <- x2 + s * trait2[i] * cos(theta)
x6 <- x1 + s * trait2[i] * cos(theta)
y1 <- s * max(trait1) * sin(theta) + dy + (w/2) * sin(pi/2 - theta) - s * min(0,min(trait1)) * sin(theta)
y2 <- s * max(trait1) * sin(theta) + dy - (w/2) * sin(pi/2 - theta) - s * min(0,min(trait1)) * sin(theta)
y3 <- y2 - s * trait1[i] * sin(theta)
y4 <- y1 - s * trait1[i] * sin(theta)
y5 <- y2 + s * trait2[i] * sin(theta)
y6 <- y1 + s * trait2[i] * sin(theta)
x1w <- s * max(trait1) * cos(theta) + dx - wider*(w/2) * cos(pi/2 - theta) - s * min(0,min(trait1)) * cos(theta)
x2w <- s * max(trait1) * cos(theta) + dx + wider*(w/2) * cos(pi/2 - theta) - s * min(0,min(trait1)) * cos(theta)
y1w <- s * max(trait1) * sin(theta) + dy + wider*(w/2) * sin(pi/2 - theta) - s * min(0,min(trait1)) * sin(theta)
y2w <- s * max(trait1) * sin(theta) + dy - wider*(w/2) * sin(pi/2 - theta) - s * min(0,min(trait1)) * sin(theta)
x01 <- x2w - s * max(trait1) * cos(theta)
x02 <- x1w - s * max(trait1) * cos(theta)
x03 <- x2w + s * max(trait1) * cos(theta)
x04 <- x1w + s * max(trait1) * cos(theta)
y01 <- y2w - s * max(trait1) * sin(theta)
y02 <- y1w - s * max(trait1) * sin(theta)
y03 <- y2w + s * max(trait1) * sin(theta)
y04 <- y1w + s * max(trait1) * sin(theta)
}
## trait 1: Quadrate
polygon(c(x1, x2, x3, x4), c(y1, y2, y3, y4),
col = quad.cols$col[which(abs(trait1[i]-quad.cols$rql)==min(abs(trait1[i]-quad.cols$rql)))], border = "black",lwd=trait.border)
## trait 2: MA
polygon(c(x1, x2, x5, x6), c(y1, y2, y5, y6),
col = MA.cols$col[which(abs(trait2[i]-MA.cols$MA)==min(abs(trait2[i]-MA.cols$MA)))], border = "black",lwd=trait.border)
}
hot_legend_image <- as.raster(matrix(rev(hot_color_func(100)), ncol=100))
rasterImage(hot_legend_image, -h ,-7.5, -5,-10)
polygon(col = NA, border = "white", lwd=0.5, x=c(-h,-h,-5,-5), y = c(-10,-7.5,-7.5,-10))
text(x=mean(c(-h,-5)),y=-5.5,"Mechanical advantage (MA)",cex=0.8, col = "white")
text(x=-h+5, y = -11.5, cex = 0.55, "More force-modified", col = "white")
text(x=-10, y = -11.5, cex = 0.55, "Less force-modified", col = "white")
arrows(-22.5,-11.5,-h+17.5,-11.5, lwd=0.75, angle = 30, length=0.05, code = 3, col = "white")
cold_legend_image <- as.raster(matrix(rev(cold_color_func(100)), ncol=100))
rasterImage(cold_legend_image, h,-7.5,5,-10)
polygon(col = NA, border = "white", lwd=0.5, x=c(h,h,5,5), y = c(-10,-7.5,-7.5,-10))
text(x=mean(c(h,5)),y=-5.5,"Relative quadrate length (RQL)",cex=0.8, col = "white")
text(x=h-5, y = -11.5, cex = 0.55, "Larger gape", col = "white")
text(x=10, y = -11.5, cex = 0.55, "Smaller gape", col = "white")
arrows(20,-11.5,h-15,-11.5, lwd=0.75, angle = 30, length=0.05, code = 3, col = "white")
diet.legend = readPNG("figs/phylogeny_diet_legend.png")
dil.x = ncol(diet.legend)/2/sqrt(3000)
dil.y = nrow(diet.legend)/2/sqrt(3000)
rasterImage(diet.legend,
xleft = -1*dil.x,
xright = dil.x,
ybottom = -25-dil.y,
ytop=-25+dil.y
)
rect(xleft = -1*dil.x,
xright = dil.x,
ybottom = -25-dil.y,
ytop=-25++1.225*dil.y+2.5,
border = "white",
lwd = 0.5
)
text("Main prey item in diet",
x=0, y = -25+dil.y,
cex = 0.8, col = "white"
)
bgcol = rgb(0,0,0, max = 255, alpha = 175)
pie.adj = NULL
#nodelabels("1",node=viper.mrca,frame="circle",bg=bgcol,cex=0.5,adj=pie.adj,col="white")  ## 1 = viperids
#nodelabels("2",node=getMRCA(map3, c("Brachyorrhos_albus","Homalopsis_buccata")),frame="circle",bg=bgcol,cex=0.5,adj=pie.adj,col="white") ## 2 = homalopsids
#nodelabels("3",node=getMRCA(map3, c("Atractaspis_bibronii","Micrurus_fulvius")),frame="circle",bg=bgcol,cex=0.5,adj=pie.adj,col="white") ## 3 = elapoids
#nodelabels("4",node=getMRCA(map3, c("Langaha_madagascariensis","Duberria_lutrix")),frame="circle",bg=bgcol,cex=0.5,adj=pie.adj,col="white") ## 4 = psuedoxyrhophiids
#nodelabels("5",node=getMRCA(map3, c("Atractaspis_bibronii","Aparallactus_werneri")),frame="circle",bg=bgcol,cex=0.5,adj=pie.adj,col="white") ## 5 = atractaspididsa
#nodelabels("6",node=elapid.mrca,frame="circle",bg=bgcol,cex=0.5,adj=pie.adj,col="white") ##  6 = elapids
#nodelabels("7",node=getMRCA(map3, c("Coluber_constrictor","Carphophis_amoenus")),frame="circle",bg=bgcol,cex=0.5,adj=pie.adj,col="white") ## 7 = colubroids
#nodelabels("8",node=dipsadid.mrca,frame="circle",bg=bgcol,cex=0.5,adj=pie.adj,col="white") ## 8 = dipsadids
#nodelabels("9",node=natricid.mrca,frame="circle",bg=bgcol,cex=0.5,adj=pie.adj,col="white") ## 9 = natricids
#nodelabels(" ",node=colubrid.mrca,frame="circle",bg=bgcol,cex=0.5,adj=pie.adj,col="white") ## 10 = colubrids
#points(x=rep(0,5), y = c(seq(18,5,by=-3.25)), pch = 21, cex = 1.5, col = "white")
#text(x=rep(0,5), y = c(seq(18,5,by=-3.25)), cex = 0.5, c(1:5), col = "white")
#text(x=rep(0,5), y = c(seq(18,5,by=-3.25)), cex = 0.5, c("Viperidae","Homalopsidae","Elapoidea","Pseudoxyrhophiidae","Atractaspididiae"), pos=4, col = "white")
#points(x=rep(23,5), y = c(seq(18,5,by=-3.25)), pch = 21, cex = 1.5, col = "white")
#text(x=rep(23,5), y = c(seq(18,5,by=-3.25)), cex = 0.5, c(6:10), col = "white")
#text(x=rep(23,5), y = c(seq(18,5,by=-3.25)), cex = 0.5, c("Elapidae","Colubroidea","Dipsadidae","Natricidae","Colubridae"), pos=4, col = "white")
}
dev.off()
}
png("figs/poster_tree_reconstruction_with_cont_data_weighted_state_colors.png",
width = 13,
height = 13,
units = "in",
res = 1200,
bg = "transparent")
{
h <- max(nodeHeights(map3))
state.colors["other"] <- "gray75"
capture.output(plot(map3, ftype="off",colors=state_colors2,
xlim = c(-2.25*h,2.25*h),ylim = c(0,h),
lwd = 1, type = "fan", part=0.5))
obj <- get("last_plot.phylo", envir = .PlotPhyloEnv)
sw <- strwidth("l")
w <- (par()$usr[4] - par()$usr[3])/(max(c(max(trait1)/max(nodeHeights(tree)), 1)) * length(tree$tip.label))*0.55
skulls = paste("figs/skulls/",list.files("figs/skulls"),sep="")
sp = gsub(".png","",word(skulls,3,3,sep="/"))
sp = dat$species[dat$species %in% sp]
skulls = paste("figs/skulls/",sp,".png",sep="")
skdat = read.csv("figs/skulls_for_figure.csv")
dat2 = dat
dat2$color[dat2$diet=="other verts"] = "gray75"
r = 1.7*h
angles = pi/16 + seq(from=0, to = 7*pi/8, length.out = 9)
xc = cos(angles)*r
yc = sin(angles)*r
yc[c(2,8)]=0.46*r
yc[c(3,7)]=0.695*r
yc[c(4,6)]=0.907*r
xc = sqrt(r^2-yc^2)
xc = xc^1.01
xc[6:9]=-1*xc[6:9]
xc
for(i in 1:9){
sk = readPNG(skulls[i])
s = sp[i]
catnum = skdat$specimen[skdat$species==s]
dietstate = skdat$diet[skdat$diet==s]
sx = ncol(sk)/2/sqrt(3000)
sy = nrow(sk)/2/sqrt(3000)
cx = xc[i]
cy = yc[i]
rasterImage(sk,
xleft = cx - sx, xright = cx + sx,
ybottom = cy - sy, ytop = cy + sy
)
stext = gsub("_"," ",s)
spdat = skdat[skdat$species==s,]
text(x=cx, y = cy - 1.3*sy, labels = bquote(italic(.(stext))),col=dat2$color[dat$species==s],
cex=0.6)
text(x=cx, y = cy - 1.3*sy - 2.5, labels = spdat$specimen,col=dat2$color[dat2$species==s],
cex=0.45)
text(x=cx, y = cy - 1.3*sy - 5, labels = spdat$diet,col=dat2$color[dat2$species==s],
cex=0.6)
px0 = cos((which(map3$tip.label==s)-ifelse((which(map3$tip.label==s)/Ntip(map3))<0.5, +0.625, -0))/Ntip(map3)*pi)*1.315*h
py0 = sin((which(map3$tip.label==s)-ifelse((which(map3$tip.label==s)/Ntip(map3))<0.5, +0.625, -0))/Ntip(map3)*pi)*1.315*h
if(i >= 7){
px1 = cx + strwidth(stext, cex = 0.6)/2.2
py1 = cy - 1.3*sy - 2.5
}else if(i >= 4){
px1 = cx
py1 = cy - 1.3*sy - 6.5
}else if(i <= 3){
px1 = cx - strwidth(stext, cex = 0.6)/2.2
py1 = cy - 1.3*sy - 2.5
}
segments(x0 = px0, y0 = py0,
y1 = py1, x1 = px1,
col = dat2$color[dat2$species==s])
}
for(i in 1:length(trait1)){
{
theta <- atan(obj$yy[i]/obj$xx[i])
s <- ifelse(obj$xx[i] > 0, 1, -1)
dx <- dx.mult *s * h * cos(theta) + s * cos(theta) * sw
dy <- dy.mult * s * h * sin(theta) + s * sin(theta) * sw
x1 <- s * max(trait1) * cos(theta) + dx - (w/2) * cos(pi/2 - theta) - s * min(0,min(trait1)) * cos(theta)
x2 <- s * max(trait1) * cos(theta) + dx + (w/2) * cos(pi/2 - theta) - s * min(0,min(trait1)) * cos(theta)
x3 <- x2 - s * trait1[i] * cos(theta)
x4 <- x1 - s * trait1[i] * cos(theta)
x5 <- x2 + s * trait2[i] * cos(theta)
x6 <- x1 + s * trait2[i] * cos(theta)
y1 <- s * max(trait1) * sin(theta) + dy + (w/2) * sin(pi/2 - theta) - s * min(0,min(trait1)) * sin(theta)
y2 <- s * max(trait1) * sin(theta) + dy - (w/2) * sin(pi/2 - theta) - s * min(0,min(trait1)) * sin(theta)
y3 <- y2 - s * trait1[i] * sin(theta)
y4 <- y1 - s * trait1[i] * sin(theta)
y5 <- y2 + s * trait2[i] * sin(theta)
y6 <- y1 + s * trait2[i] * sin(theta)
x1w <- s * max(trait1) * cos(theta) + dx - wider*(w/2) * cos(pi/2 - theta) - s * min(0,min(trait1)) * cos(theta)
x2w <- s * max(trait1) * cos(theta) + dx + wider*(w/2) * cos(pi/2 - theta) - s * min(0,min(trait1)) * cos(theta)
y1w <- s * max(trait1) * sin(theta) + dy + wider*(w/2) * sin(pi/2 - theta) - s * min(0,min(trait1)) * sin(theta)
y2w <- s * max(trait1) * sin(theta) + dy - wider*(w/2) * sin(pi/2 - theta) - s * min(0,min(trait1)) * sin(theta)
x01 <- x2w - s * max(trait1) * cos(theta)
x02 <- x1w - s * max(trait1) * cos(theta)
x03 <- x2w + s * max(trait1) * cos(theta)
x04 <- x1w + s * max(trait1) * cos(theta)
y01 <- y2w - s * max(trait1) * sin(theta)
y02 <- y1w - s * max(trait1) * sin(theta)
y03 <- y2w + s * max(trait1) * sin(theta)
y04 <- y1w + s * max(trait1) * sin(theta)
}
## background state colors
polygon(c(x02, x01, x03, x04), c(y02, y01, y03, y04),
col = desat(dat$color[i],bg.thinner), border = desat(dat$color[i],bg.thinner), lwd = 0.01)
## trait 1: Quadrate
#polygon(c(x1, x2, x3, x4), c(y1, y2, y3, y4),
#        col = quad.cols$col[which(abs(trait1[i]-quad.cols$rql)==min(abs(trait1[i]-quad.cols$rql)))], border = "white",lwd=0.005)
## trait 2: MA
#polygon(c(x1, x2, x5, x6), c(y1, y2, y5, y6),
#        col = MA.cols$col[which(abs(trait2[i]-MA.cols$MA)==min(abs(trait2[i]-MA.cols$MA)))], border = "white",lwd=0.005)
if(i+1<=Ntip(map2)){
j <- i+1
if(theta >= 0){
x1.j <- x02
y1.j <- y02
x2.j <- x04
y2.j <- y04
}else if(theta < 0){
x1.j <- x01
y1.j <- y01
x2.j <- x03
y2.j <- y03
}
theta <- atan(obj$yy[j]/obj$xx[j])
if(theta >= 0){
{
s <- ifelse(obj$xx[j] > 0, 1, -1)
dx <- dx.mult *s * h * cos(theta) + s * cos(theta) * sw
dy <- dy.mult * s * h * sin(theta) + s * sin(theta) * sw
x1 <- s * max(trait1) * cos(theta) + dx - (w/2) * cos(pi/2 - theta) - s * min(0,min(trait1)) * cos(theta)
x2 <- s * max(trait1) * cos(theta) + dx + (w/2) * cos(pi/2 - theta) - s * min(0,min(trait1)) * cos(theta)
x3 <- x2 - s * trait1[j] * cos(theta)
x4 <- x1 - s * trait1[j] * cos(theta)
x5 <- x2 + s * trait2[j] * cos(theta)
x6 <- x1 + s * trait2[j] * cos(theta)
y1 <- s * max(trait1) * sin(theta) + dy + (w/2) * sin(pi/2 - theta) - s * min(0,min(trait1)) * sin(theta)
y2 <- s * max(trait1) * sin(theta) + dy - (w/2) * sin(pi/2 - theta) - s * min(0,min(trait1)) * sin(theta)
y3 <- y2 - s * trait1[j] * sin(theta)
y4 <- y1 - s * trait1[j] * sin(theta)
y5 <- y2 + s * trait2[j] * sin(theta)
y6 <- y1 + s * trait2[j] * sin(theta)
x1w <- s * max(trait1) * cos(theta) + dx - wider*(w/2) * cos(pi/2 - theta) - s * min(0,min(trait1)) * cos(theta)
x2w <- s * max(trait1) * cos(theta) + dx + wider*(w/2) * cos(pi/2 - theta) - s * min(0,min(trait1)) * cos(theta)
y1w <- s * max(trait1) * sin(theta) + dy + wider*(w/2) * sin(pi/2 - theta) - s * min(0,min(trait1)) * sin(theta)
y2w <- s * max(trait1) * sin(theta) + dy - wider*(w/2) * sin(pi/2 - theta) - s * min(0,min(trait1)) * sin(theta)
x01 <- x2w - s * max(trait1) * cos(theta)
x02 <- x1w - s * max(trait1) * cos(theta)
x03 <- x2w + s * max(trait1) * cos(theta)
x04 <- x1w + s * max(trait1) * cos(theta)
y01 <- y2w - s * max(trait1) * sin(theta)
y02 <- y1w - s * max(trait1) * sin(theta)
y03 <- y2w + s * max(trait1) * sin(theta)
y04 <- y1w + s * max(trait1) * sin(theta)
}
x3.j <- x01
y3.j <- y01
x4.j <- x03
y4.j <- y03
x5.j <- mean(c(x1.j, x3.j))
x6.j <- mean(c(x2.j, x4.j))
y5.j <- mean(c(y1.j, y3.j))
y6.j <- mean(c(y2.j, y4.j))
}else if(theta<0){
{
s <- ifelse(obj$xx[j] > 0, 1, -1)
dx <- dx.mult *s * h * cos(theta) + s * cos(theta) * sw
dy <- dy.mult * s * h * sin(theta) + s * sin(theta) * sw
x1 <- s * max(trait1) * cos(theta) + dx - (w/2) * cos(pi/2 - theta) - s * min(0,min(trait1)) * cos(theta)
x2 <- s * max(trait1) * cos(theta) + dx + (w/2) * cos(pi/2 - theta) - s * min(0,min(trait1)) * cos(theta)
x3 <- x2 - s * trait1[j] * cos(theta)
x4 <- x1 - s * trait1[j] * cos(theta)
x5 <- x2 + s * trait2[j] * cos(theta)
x6 <- x1 + s * trait2[j] * cos(theta)
y1 <- s * max(trait1) * sin(theta) + dy + (w/2) * sin(pi/2 - theta) - s * min(0,min(trait1)) * sin(theta)
y2 <- s * max(trait1) * sin(theta) + dy - (w/2) * sin(pi/2 - theta) - s * min(0,min(trait1)) * sin(theta)
y3 <- y2 - s * trait1[j] * sin(theta)
y4 <- y1 - s * trait1[j] * sin(theta)
y5 <- y2 + s * trait2[j] * sin(theta)
y6 <- y1 + s * trait2[j] * sin(theta)
x1w <- s * max(trait1) * cos(theta) + dx - wider*(w/2) * cos(pi/2 - theta) - s * min(0,min(trait1)) * cos(theta)
x2w <- s * max(trait1) * cos(theta) + dx + wider*(w/2) * cos(pi/2 - theta) - s * min(0,min(trait1)) * cos(theta)
y1w <- s * max(trait1) * sin(theta) + dy + wider*(w/2) * sin(pi/2 - theta) - s * min(0,min(trait1)) * sin(theta)
y2w <- s * max(trait1) * sin(theta) + dy - wider*(w/2) * sin(pi/2 - theta) - s * min(0,min(trait1)) * sin(theta)
x01 <- x2w - s * max(trait1) * cos(theta)
x02 <- x1w - s * max(trait1) * cos(theta)
x03 <- x2w + s * max(trait1) * cos(theta)
x04 <- x1w + s * max(trait1) * cos(theta)
y01 <- y2w - s * max(trait1) * sin(theta)
y02 <- y1w - s * max(trait1) * sin(theta)
y03 <- y2w + s * max(trait1) * sin(theta)
y04 <- y1w + s * max(trait1) * sin(theta)
}
x3.j <- x02
y3.j <- y02
x4.j <- x04
y4.j <- y04
x5.j <- mean(c(x1.j, x3.j))
x6.j <- mean(c(x2.j, x4.j))
y5.j <- mean(c(y1.j, y3.j))
y6.j <- mean(c(y2.j, y4.j))
}
polygon(c(x2.j,x1.j,x5.j,x6.j), c(y2.j,y1.j,y5.j,y6.j), col=desat(dat$color[i],bg.thinner), border=desat(dat$color[i],bg.thinner), lwd = 0.01)
polygon(c(x4.j,x3.j,x5.j,x6.j), c(y4.j,y3.j,y5.j,y6.j), col=desat(dat$color[j],bg.thinner), border=desat(dat$color[i],bg.thinner), lwd = 0.01)
}
{
theta <- atan(obj$yy[i]/obj$xx[i])
s <- ifelse(obj$xx[i] > 0, 1, -1)
dx <- dx.mult *s * h * cos(theta) + s * cos(theta) * sw
dy <- dy.mult * s * h * sin(theta) + s * sin(theta) * sw
x1 <- s * max(trait1) * cos(theta) + dx - (w/2) * cos(pi/2 - theta) - s * min(0,min(trait1)) * cos(theta)
x2 <- s * max(trait1) * cos(theta) + dx + (w/2) * cos(pi/2 - theta) - s * min(0,min(trait1)) * cos(theta)
x3 <- x2 - s * trait1[i] * cos(theta)
x4 <- x1 - s * trait1[i] * cos(theta)
x5 <- x2 + s * trait2[i] * cos(theta)
x6 <- x1 + s * trait2[i] * cos(theta)
y1 <- s * max(trait1) * sin(theta) + dy + (w/2) * sin(pi/2 - theta) - s * min(0,min(trait1)) * sin(theta)
y2 <- s * max(trait1) * sin(theta) + dy - (w/2) * sin(pi/2 - theta) - s * min(0,min(trait1)) * sin(theta)
y3 <- y2 - s * trait1[i] * sin(theta)
y4 <- y1 - s * trait1[i] * sin(theta)
y5 <- y2 + s * trait2[i] * sin(theta)
y6 <- y1 + s * trait2[i] * sin(theta)
x1w <- s * max(trait1) * cos(theta) + dx - wider*(w/2) * cos(pi/2 - theta) - s * min(0,min(trait1)) * cos(theta)
x2w <- s * max(trait1) * cos(theta) + dx + wider*(w/2) * cos(pi/2 - theta) - s * min(0,min(trait1)) * cos(theta)
y1w <- s * max(trait1) * sin(theta) + dy + wider*(w/2) * sin(pi/2 - theta) - s * min(0,min(trait1)) * sin(theta)
y2w <- s * max(trait1) * sin(theta) + dy - wider*(w/2) * sin(pi/2 - theta) - s * min(0,min(trait1)) * sin(theta)
x01 <- x2w - s * max(trait1) * cos(theta)
x02 <- x1w - s * max(trait1) * cos(theta)
x03 <- x2w + s * max(trait1) * cos(theta)
x04 <- x1w + s * max(trait1) * cos(theta)
y01 <- y2w - s * max(trait1) * sin(theta)
y02 <- y1w - s * max(trait1) * sin(theta)
y03 <- y2w + s * max(trait1) * sin(theta)
y04 <- y1w + s * max(trait1) * sin(theta)
}
## trait 1: Quadrate
polygon(c(x1, x2, x3, x4), c(y1, y2, y3, y4),
col = quad.cols$col[which(abs(trait1[i]-quad.cols$rql)==min(abs(trait1[i]-quad.cols$rql)))], border = "black",lwd=trait.border)
## trait 2: MA
polygon(c(x1, x2, x5, x6), c(y1, y2, y5, y6),
col = MA.cols$col[which(abs(trait2[i]-MA.cols$MA)==min(abs(trait2[i]-MA.cols$MA)))], border = "black",lwd=trait.border)
}
hot_legend_image <- as.raster(matrix(rev(hot_color_func(100)), ncol=100))
rasterImage(hot_legend_image, -h ,-7.5, -5,-10)
polygon(col = NA, border = "white", lwd=0.5, x=c(-h,-h,-5,-5), y = c(-10,-7.5,-7.5,-10))
text(x=mean(c(-h,-5)),y=-5.5,"Mechanical advantage (MA)",cex=0.8, col = "white")
text(x=-h+5, y = -11.5, cex = 0.55, "More force-modified", col = "white")
text(x=-10, y = -11.5, cex = 0.55, "Less force-modified", col = "white")
arrows(-22.5,-11.5,-h+17.5,-11.5, lwd=0.75, angle = 30, length=0.05, code = 3, col = "white")
cold_legend_image <- as.raster(matrix(rev(cold_color_func(100)), ncol=100))
rasterImage(cold_legend_image, h,-7.5,5,-10)
polygon(col = NA, border = "white", lwd=0.5, x=c(h,h,5,5), y = c(-10,-7.5,-7.5,-10))
text(x=mean(c(h,5)),y=-5.5,"Relative quadrate length (RQL)",cex=0.8, col = "white")
text(x=h-5, y = -11.5, cex = 0.55, "Larger gape", col = "white")
text(x=10, y = -11.5, cex = 0.55, "Smaller gape", col = "white")
arrows(20,-11.5,h-15,-11.5, lwd=0.75, angle = 30, length=0.05, code = 3, col = "white")
diet.legend = readPNG("figs/phylogeny_diet_legend.png")
dil.x = ncol(diet.legend)/2/sqrt(3000)
dil.y = nrow(diet.legend)/2/sqrt(3000)
rasterImage(diet.legend,
xleft = -1*dil.x,
xright = dil.x,
ybottom = -25-dil.y,
ytop=-25+dil.y
)
rect(xleft = -1*dil.x,
xright = dil.x,
ybottom = -25-dil.y,
ytop=-25++1.225*dil.y+2.5,
border = "white",
lwd = 0.5
)
text("Main prey item in diet",
x=0, y = -25+dil.y,
cex = 0.8, col = "white"
)
bgcol = rgb(0,0,0, max = 255, alpha = 175)
pie.adj = NULL
#nodelabels("1",node=viper.mrca,frame="circle",bg=bgcol,cex=0.5,adj=pie.adj,col="white")  ## 1 = viperids
#nodelabels("2",node=getMRCA(map3, c("Brachyorrhos_albus","Homalopsis_buccata")),frame="circle",bg=bgcol,cex=0.5,adj=pie.adj,col="white") ## 2 = homalopsids
#nodelabels("3",node=getMRCA(map3, c("Atractaspis_bibronii","Micrurus_fulvius")),frame="circle",bg=bgcol,cex=0.5,adj=pie.adj,col="white") ## 3 = elapoids
#nodelabels("4",node=getMRCA(map3, c("Langaha_madagascariensis","Duberria_lutrix")),frame="circle",bg=bgcol,cex=0.5,adj=pie.adj,col="white") ## 4 = psuedoxyrhophiids
#nodelabels("5",node=getMRCA(map3, c("Atractaspis_bibronii","Aparallactus_werneri")),frame="circle",bg=bgcol,cex=0.5,adj=pie.adj,col="white") ## 5 = atractaspididsa
#nodelabels("6",node=elapid.mrca,frame="circle",bg=bgcol,cex=0.5,adj=pie.adj,col="white") ##  6 = elapids
#nodelabels("7",node=getMRCA(map3, c("Coluber_constrictor","Carphophis_amoenus")),frame="circle",bg=bgcol,cex=0.5,adj=pie.adj,col="white") ## 7 = colubroids
#nodelabels("8",node=dipsadid.mrca,frame="circle",bg=bgcol,cex=0.5,adj=pie.adj,col="white") ## 8 = dipsadids
#nodelabels("9",node=natricid.mrca,frame="circle",bg=bgcol,cex=0.5,adj=pie.adj,col="white") ## 9 = natricids
#nodelabels(" ",node=colubrid.mrca,frame="circle",bg=bgcol,cex=0.5,adj=pie.adj,col="white") ## 10 = colubrids
#points(x=rep(0,5), y = c(seq(18,5,by=-3.25)), pch = 21, cex = 1.5, col = "white")
#text(x=rep(0,5), y = c(seq(18,5,by=-3.25)), cex = 0.5, c(1:5), col = "white")
#text(x=rep(0,5), y = c(seq(18,5,by=-3.25)), cex = 0.5, c("Viperidae","Homalopsidae","Elapoidea","Pseudoxyrhophiidae","Atractaspididiae"), pos=4, col = "white")
#points(x=rep(23,5), y = c(seq(18,5,by=-3.25)), pch = 21, cex = 1.5, col = "white")
#text(x=rep(23,5), y = c(seq(18,5,by=-3.25)), cex = 0.5, c(6:10), col = "white")
#text(x=rep(23,5), y = c(seq(18,5,by=-3.25)), cex = 0.5, c("Elapidae","Colubroidea","Dipsadidae","Natricidae","Colubridae"), pos=4, col = "white")
}
dev.off()
